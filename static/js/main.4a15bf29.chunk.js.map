{"version":3,"sources":["DndItemTypes.js","components/Team/Team.js","components/Position/Position.js","components/LeagueTable/Positions.js","components/LeagueTable/SampleData.js","hooks/useLocalStorage.js","components/LeagueTable/LeagueTable.js","components/App.js","registerServiceWorker.js","index.js"],"names":["ItemTypes","Team","props","positionNumber","rank","team","updateTeamname","dragReturn","useDrag","item","type","end","monitor","didDrop","sourceTeam","getItem","dropResult","getDropResult","swapPositions","id","classes","classNames","className","style","cursor","ref","onChange","evt","target","value","html","name","autoFocus","maxLength","disabled","editing","Position","dropReturn","useDrop","accept","drop","findTeamRank","teamId","positions","findIndex","findTeam","find","SAMPLE_LEAGUE_TABLE","useLocalStorage","key","initialValue","storedValue","window","localStorage","JSON","parse","error","console","log","getValue","valueToStore","Function","setItem","stringify","LeagueTable","storedState","setStoredState","useState","setPositions","sourceTeamId","targetTeamId","currentPositions","clonedPositions","slice","sourceRank","targetRank","targetTeam","recalculateSwappedPositions","updatedText","teamRank","recalculatePositionsWithRenamedTeam","useEffect","positionNodes","map","index","DndProvider","backend","HTML5Backend","Col","md","Card","bg","Header","Title","Body","App","Container","Row","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","catch","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.4a15bf29.chunk.js","sourcesContent":["export const ItemTypes = {\n  TEAM: 'team',\n};\n","import { useDrag } from 'react-dnd';\nimport React from 'react';\nimport { ItemTypes } from '../../DndItemTypes';\nimport classNames from 'classnames';\nimport PropTypes from 'prop-types';\nimport ContentEditable from 'react-contenteditable';\n\nconst calculatePositionCssClass = (positionNumber) => {\n  if (positionNumber === 1) {\n    return 'tabellenfuehrerClass tabelleClass';\n  }\n  if (positionNumber <= 3) {\n    return 'championsLeagueClass tabelleClass';\n  }\n  if (positionNumber <= 6) {\n    return 'europaLeagueClass tabelleClass';\n  }\n  if (positionNumber <= 15) {\n    return 'mittelfeldClass tabelleClass';\n  }\n  if (positionNumber === 16) {\n    return 'relegationClass tabelleClass';\n  } else {\n    return 'abstiegClass tabelleClass';\n  }\n};\n\nconst Team = (props) => {\n  const end = (item, monitor) => {\n    if (!monitor.didDrop()) {\n      return;\n    }\n    // When dropped on a compatible target, do something\n    const sourceTeam = monitor.getItem();\n    const dropResult = monitor.getDropResult();\n    props.swapPositions(sourceTeam.team.id, dropResult.team.id);\n  };\n\n  const { rank, team, updateTeamname } = props;\n  // These two props are injected by React DnD,\n  // as defined by your `collect` function above:\n\n  const dragReturn = useDrag({\n    item: { team, type: ItemTypes.TEAM },\n    end,\n  });\n\n  const classes = classNames(\n    'col-md-12',\n    'btn',\n    'text-bold',\n    calculatePositionCssClass(rank)\n  );\n\n  const onChange = (evt) => {\n    updateTeamname(team, evt.target.value);\n  };\n\n  return (\n    <div className={classes} style={{ cursor: 'pointer' }} ref={dragReturn[1]}>\n      <ContentEditable\n        onChange={onChange}\n        className=\"textPointer\"\n        html={team.name}\n        autoFocus={true}\n        maxLength={200}\n        disabled={!team.editing}\n      />\n    </div>\n  );\n};\n\nTeam.propTypes = {\n  rank: PropTypes.number.isRequired,\n\n  // Injected by React DnD:\n  team: PropTypes.object.isRequired,\n  updateTeamname: PropTypes.func.isRequired,\n};\n\nexport default Team;\n","import React from 'react';\nimport { useDrop } from 'react-dnd';\nimport Team from '../Team/Team';\nimport PropTypes from 'prop-types';\nimport { ItemTypes } from '../../DndItemTypes';\n\nconst Position = (props) => {\n  const team = props.team;\n  const rank = props.rank;\n  const updateTeamname = props.updateTeamname;\n  const swapPositions = props.swapPositions;\n  const drop = () => {\n    return { team: props.team };\n  };\n\n  const dropReturn = useDrop({\n    accept: ItemTypes.TEAM,\n    drop,\n  });\n  return (\n    <div ref={dropReturn[1]}>\n      <Team\n        team={team}\n        rank={rank}\n        updateTeamname={updateTeamname}\n        swapPositions={swapPositions}\n      />\n    </div>\n  );\n};\n\nPosition.propTypes = {\n  rank: PropTypes.number.isRequired,\n  swapPositions: PropTypes.func.isRequired,\n  team: PropTypes.object.isRequired,\n  updateTeamname: PropTypes.func.isRequired,\n};\n\nexport default Position;\n","const findTeamRank = (teamId, positions) => {\n  const zeroBasedIndex = positions.findIndex((team) => team.id === teamId);\n  return zeroBasedIndex + 1;\n};\n\nconst findTeam = (teamId, positions) => {\n  return positions.find((team) => team.id === teamId);\n};\n\nexport const recalculateSwappedPositions = (\n  sourceTeamId,\n  targetTeamId,\n  currentPositions\n) => {\n  const clonedPositions = currentPositions.slice();\n\n  const sourceRank = findTeamRank(sourceTeamId, clonedPositions);\n  const targetRank = findTeamRank(targetTeamId, clonedPositions);\n\n  const sourceTeam = findTeam(sourceTeamId, clonedPositions);\n  const targetTeam = findTeam(targetTeamId, clonedPositions);\n\n  clonedPositions[targetRank - 1] = sourceTeam;\n  clonedPositions[sourceRank - 1] = targetTeam;\n  return clonedPositions;\n};\n\nexport const recalculatePositionsWithRenamedTeam = (\n  team,\n  updatedText,\n  currentPositions\n) => {\n  const clonedPositions = currentPositions.slice();\n\n  const teamRank = findTeamRank(team.id, clonedPositions);\n\n  team.name = updatedText;\n\n  clonedPositions[teamRank - 1] = team;\n  return clonedPositions;\n};\n","export const SAMPLE_LEAGUE_TABLE = [\n  {\n    name: 'Borussia Mönchengladbach',\n    editing: true,\n    id: 'BMG',\n  },\n  {\n    name: 'Borussia Dortmund',\n    editing: true,\n    id: 'BVB',\n  },\n  {\n    name: 'FC Bayern München',\n    editing: true,\n    id: 'FCB',\n  },\n  {\n    name: 'VFL Wolfsburg',\n    editing: true,\n    id: 'VFL',\n  },\n  {\n    name: 'Bayer Leverkusen',\n    editing: true,\n    id: 'B04',\n  },\n  {\n    name: 'FC Schalke 04',\n    editing: true,\n    id: 'S04',\n  },\n  {\n    name: 'Hertha BSC Berlin',\n    editing: true,\n    id: 'BSC',\n  },\n  {\n    name: '1. FC Köln',\n    editing: true,\n    id: '1FC',\n  },\n  {\n    name: 'FC Ingolstadt',\n    editing: true,\n    id: 'FCI',\n  },\n  {\n    name: 'Darmstadt 98',\n    editing: true,\n    id: 'D98',\n  },\n  {\n    name: 'Hamburger SV',\n    editing: true,\n    id: 'HSV',\n  },\n  {\n    name: 'Eintracht Frankfurt',\n    editing: true,\n    id: 'SGE',\n  },\n  {\n    name: 'Werder Bremen',\n    editing: true,\n    id: 'SVW',\n  },\n  {\n    name: 'Hoffenheim',\n    editing: true,\n    id: 'SAP',\n  },\n  {\n    name: 'FC Augsburg',\n    editing: true,\n    id: 'FCA',\n  },\n  {\n    name: 'Hannover 96',\n    editing: true,\n    id: 'H96',\n  },\n  {\n    name: 'Mainz 05',\n    editing: true,\n    id: 'M05',\n  },\n  {\n    name: 'VFB Stuttgart',\n    editing: true,\n    id: 'VFB',\n  },\n];\n","const getValue = (key, initialValue) => {\n  try {\n    // Get from local storage by key\n    const item = window.localStorage.getItem(key);\n    // Parse stored json or if none return initialValue\n    return item ? JSON.parse(item) : initialValue;\n  } catch (error) {\n    // If error also return initialValue\n    console.log(error);\n    return initialValue;\n  }\n};\n\nexport const useLocalStorage = (key, initialValue) => {\n  // State to store our value\n  // Pass initial state function to useState so logic is only executed once\n  const storedValue = getValue(key, initialValue);\n\n  // Return a wrapped version of useState's setter function that ...\n  // ... persists the new value to localStorage.\n  const setValue = (value) => {\n    try {\n      // Allow value to be a function so we have same API as useState\n      const valueToStore =\n        value instanceof Function ? value(storedValue) : value;\n      // Save to local storage\n      window.localStorage.setItem(key, JSON.stringify(valueToStore));\n    } catch (error) {\n      // A more advanced implementation would handle the error case\n      console.log(error);\n    }\n  };\n\n  return [storedValue, setValue];\n};\n","import React, { useState, useEffect } from 'react';\nimport Position from '../Position/Position';\nimport { DndProvider } from 'react-dnd';\nimport { HTML5Backend } from 'react-dnd-html5-backend';\nimport {\n  recalculateSwappedPositions,\n  recalculatePositionsWithRenamedTeam,\n} from './Positions';\nimport { SAMPLE_LEAGUE_TABLE } from './SampleData';\nimport { Card, Col } from 'react-bootstrap';\nimport { useLocalStorage } from '../../hooks/useLocalStorage';\n\nconst LeagueTable = () => {\n  const [storedState, setStoredState] = useLocalStorage(\n    'LEAGUE_TABLE',\n    SAMPLE_LEAGUE_TABLE\n  );\n\n  const [positions, setPositions] = useState(storedState);\n\n  const swapPositions = (sourceTeamId, targetTeamId) => {\n    setPositions(\n      recalculateSwappedPositions(sourceTeamId, targetTeamId, positions)\n    );\n  };\n\n  const updateTeamname = (team, updatedText) => {\n    setPositions(\n      recalculatePositionsWithRenamedTeam(team, updatedText, positions)\n    );\n  };\n\n  useEffect(() => {\n    setStoredState(positions);\n  });\n\n  const positionNodes = positions.map((team, index) => (\n    <Position\n      team={team}\n      rank={index + 1}\n      key={index}\n      swapPositions={swapPositions}\n      updateTeamname={updateTeamname}\n    />\n  ));\n\n  return (\n    <DndProvider backend={HTML5Backend}>\n      <Col md={6}>\n        <Card bg=\"dark\">\n          <Card.Header>\n            <Card.Title>Ligatabelle zum Selberstecken</Card.Title>\n          </Card.Header>\n          <Card.Body>{positionNodes}</Card.Body>\n        </Card>\n      </Col>\n    </DndProvider>\n  );\n};\n\nexport default LeagueTable;\n","import React from 'react';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport './App.css';\nimport { Row, Container } from 'react-bootstrap';\nimport LeagueTable from './LeagueTable/LeagueTable';\n\nconst App = () => {\n  return (\n    <div className=\"index\">\n      <Container>\n        <Row>\n          <LeagueTable />\n        </Row>\n      </Container>\n    </div>\n  );\n};\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\nimport registerServiceWorker from './registerServiceWorker';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport './index.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();\n"],"sourceRoot":""}