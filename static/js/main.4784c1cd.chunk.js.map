{"version":3,"sources":["constants/DndItemTypes.js","constants/SampleData.js","components/Team.js","components/Position.js","model/Positions.js","components/LeagueTable.js","components/App.js","registerServiceWorker.js","index.js"],"names":["exports","ItemTypes","TEAM","SAMPLE_LEAGUE_TABLE","name","editing","id","DragSource","beginDrag","props","sourceId","team","endDrag","monitor","didDrop","sourceTeam","getItem","targetTeam","getDropResult","swapPositions","connect","connectDragSource","dragSource","isDragging","positionNumber","rank","updateTeamname","classes","classNames","className","style","cursor","onChange","evt","target","value","html","autoFocus","maxLength","disabled","DropTarget","drop","connectDropTarget","dropTarget","isOver","item","Positions","_findTeamRank","teamId","positions","findIndex","_findTeam","find","recalculateSwappedPositions","sourceTeamId","targetTeamId","currentPositions","clonedPositions","slice","sourceRank","targetRank","recalculatePositionsWithRenamedTeam","updatedText","teamRank","LeagueTable","defaultState","useState","_","isUndefined","localStorage","state","localstate","JSON","parse","getInitialState","setPositions","useEffect","stringify","positionNodes","map","index","key","backend","HTML5Backend","Col","md","Card","bg","Header","Title","Body","App","Container","Row","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","catch","error","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"oGAAAA,EAAQC,UAAY,CAClBC,KAAM,S,iBCDRF,EAAQG,oBAAsB,CAC5B,CACEC,KAAM,8BACNC,SAAS,EACTC,GAAI,OAEN,CACEF,KAAM,oBACNC,SAAS,EACTC,GAAI,OAEN,CACEF,KAAM,uBACNC,SAAS,EACTC,GAAI,OAEN,CACEF,KAAM,gBACNC,SAAS,EACTC,GAAI,OAEN,CACEF,KAAM,mBACNC,SAAS,EACTC,GAAI,OAEN,CACEF,KAAM,gBACNC,SAAS,EACTC,GAAI,OAEN,CACEF,KAAM,oBACNC,SAAS,EACTC,GAAI,OAEN,CACEF,KAAM,gBACNC,SAAS,EACTC,GAAI,OAEN,CACEF,KAAM,gBACNC,SAAS,EACTC,GAAI,OAEN,CACEF,KAAM,eACNC,SAAS,EACTC,GAAI,OAEN,CACEF,KAAM,eACNC,SAAS,EACTC,GAAI,OAEN,CACEF,KAAM,sBACNC,SAAS,EACTC,GAAI,OAEN,CACEF,KAAM,gBACNC,SAAS,EACTC,GAAI,OAEN,CACEF,KAAM,aACNC,SAAS,EACTC,GAAI,OAEN,CACEF,KAAM,cACNC,SAAS,EACTC,GAAI,OAEN,CACEF,KAAM,cACNC,SAAS,EACTC,GAAI,OAEN,CACEF,KAAM,WACNC,SAAS,EACTC,GAAI,OAEN,CACEF,KAAM,gBACNC,SAAS,EACTC,GAAI,S,gPCGOC,cAAWN,YAAUC,KArFjB,CACjBM,UADiB,SACPC,GAER,MAAO,CAAEC,SAAUD,EAAME,KAAKL,KAGhCM,QANiB,SAMTH,EAAOI,GACb,GAAKA,EAAQC,UAAb,CAKA,IAAMC,EAAaF,EAAQG,UACrBC,EAAaJ,EAAQK,gBAC3BT,EAAMU,cAAcJ,EAAWL,SAAUO,EAAWX,OAIxC,SAACc,EAASP,GACxB,MAAO,CACLQ,kBAAmBD,EAAQE,aAC3BC,WAAYV,EAAQU,eAgEThB,CAxCF,SAAAE,GAAU,IApBWe,EAqBxBC,EAA+BhB,EAA/BgB,KAAMd,EAAyBF,EAAzBE,KAAMe,EAAmBjB,EAAnBiB,eAGZL,EAAsBZ,EAAtBY,kBACFM,EAAUC,IACd,YACA,MACA,YA3BqB,KADSJ,EA6BJC,GA3BnB,oCAELD,GAAkB,EACb,oCAELA,GAAkB,EACb,iCAELA,GAAkB,GACb,+BAEc,KAAnBA,EACK,+BAEA,6BAoBT,OAAOH,EACL,yBAAKQ,UAAWF,EAASG,MAAO,CAAEC,OAAQ,YACxC,kBAAC,IAAD,CACEC,SAPW,SAAAC,GACfP,EAAef,EAAMsB,EAAIC,OAAOC,QAO5BN,UAAU,cACVO,KAAMzB,EAAKP,KACXiC,WAAW,EACXC,UAAW,IACXC,UAAW5B,EAAKN,cC/BTmC,cAAWvC,YAAUC,KAvCb,CACrBuC,KADqB,SAChBhC,GACH,OAAOA,EAAME,OAID,SAACS,EAASP,GACxB,MAAO,CACL6B,kBAAmBtB,EAAQuB,aAC3BC,OAAQ/B,EAAQ+B,SAChBC,KAAMhC,EAAQG,YA6BHwB,CAzBE,SAAA/B,GACf,IAAME,EAAOF,EAAME,KACbc,EAAOhB,EAAMgB,KACbC,EAAiBjB,EAAMiB,eACvBP,EAAgBV,EAAMU,cAE5B,OAAOuB,EADuBjC,EAAtBiC,mBAEN,6BACE,kBAAC,EAAD,CACE/B,KAAMA,EACNc,KAAMA,EACNC,eAAgBA,EAChBP,cAAeA,Q,QChCF2B,E,kCAAAA,EACZC,cAAgB,SAACC,EAAQC,GAE9B,OADuBA,EAAUC,UAAU,SAAAvC,GAAI,OAAIA,EAAKL,KAAO0C,IACvC,GAHPF,EAMZK,UAAY,SAACH,EAAQC,GAC1B,OAAOA,EAAUG,KAAK,SAAAzC,GAAI,OAAIA,EAAKL,KAAO0C,KAPzBF,EAUZO,4BAA8B,SACnCC,EACAC,EACAC,GAEA,IAAMC,EAAkBD,EAAiBE,QAEnCC,EAAab,EAAUC,cAAcO,EAAcG,GACnDG,EAAad,EAAUC,cAAcQ,EAAcE,GAEnD1C,EAAa+B,EAAUK,UAAUG,EAAcG,GAC/CxC,EAAa6B,EAAUK,UAAUI,EAAcE,GAIrD,OAFAA,EAAgBG,EAAa,GAAK7C,EAClC0C,EAAgBE,EAAa,GAAK1C,EAC3BwC,GAzBUX,EA4BZe,oCAAsC,SAC3ClD,EACAmD,EACAN,GAEA,IAAMC,EAAkBD,EAAiBE,QAEnCK,EAAWjB,EAAUC,cAAcpC,EAAKL,GAAImD,GAMlD,OAHA9C,EAAKP,KAAO0D,EAEZL,EAAgBM,EAAW,GAAKpD,EACzB8C,G,qDCoCIO,EApEK,WAClB,IAAMC,EAAe,CACnBhB,UAAW9C,uBAFW,EAiBU+D,mBAZV,WACtB,GAAIC,IAAEC,YAAYC,aAAaC,OAC7B,OAAOL,EAET,IAAMM,EAAaC,KAAKC,MAAMJ,aAAaC,OAE3C,OAAIH,IAAEC,YAAYG,GACTN,EAEFM,EAGkCG,GAAkBzB,WAjBrC,mBAiBjBA,EAjBiB,KAiBN0B,EAjBM,KAmBlBxD,EAAgB,SAACmC,EAAcC,GACnCoB,EACE7B,EAAUO,4BACRC,EACAC,EACAN,KAKAvB,EAAiB,SAACf,EAAMmD,GAC5Ba,EACE7B,EAAUe,oCACRlD,EACAmD,EACAb,KAKN2B,oBAAU,WAERP,aAAaC,MAAQE,KAAKK,UAAU,CAAE5B,gBAGxC,IAAM6B,EAAgB7B,EAAU8B,IAAI,SAACpE,EAAMqE,GAAP,OAClC,kBAAC,EAAD,CACErE,KAAMA,EACNc,KAAMuD,EAAQ,EACdC,IAAKD,EACL7D,cAAeA,EACfO,eAAgBA,MAIpB,OACE,kBAAC,IAAD,CAAawD,QAASC,KACpB,kBAACC,EAAA,EAAD,CAAKC,GAAI,GACP,kBAACC,EAAA,EAAD,CAAMC,GAAG,QACP,kBAACD,EAAA,EAAKE,OAAN,KACE,kBAACF,EAAA,EAAKG,MAAN,uCAEF,kBAACH,EAAA,EAAKI,KAAN,KAAYZ,OCpDPa,EAZH,WACV,OACE,yBAAK9D,UAAU,SACb,kBAAC+D,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KACE,kBAAC,EAAD,UCDJC,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DAsCN,SAASC,EAAgBC,GACvBC,UAAUC,cACPC,SAASH,GACTI,KAAK,SAAAC,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACtCD,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBtC,QACfgC,UAAUC,cAAcQ,WAK1BC,QAAQC,IAAI,6CAKZD,QAAQC,IAAI,2CAMrBC,MAAM,SAAAC,GACLH,QAAQG,MAAM,4CAA6CA,K,MCxEjEC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDalC,WACb,GAA6C,kBAAmBjB,UAAW,CAGzE,GADkB,IAAIkB,IAAIC,iBAAwBzB,OAAOC,UAC3CyB,SAAW1B,OAAOC,SAASyB,OAIvC,OAGF1B,OAAO2B,iBAAiB,OAAQ,WAC9B,IAAMtB,EAAK,UAAMoB,iBAAN,sBAEP3B,IAiDV,SAAiCO,GAE/BuB,MAAMvB,GACHI,KAAK,SAAAoB,GAGkB,MAApBA,EAASC,SACuD,IAAhED,EAASE,QAAQC,IAAI,gBAAgBC,QAAQ,cAG7C3B,UAAUC,cAAc2B,MAAMzB,KAAK,SAAAC,GACjCA,EAAayB,aAAa1B,KAAK,WAC7BT,OAAOC,SAASmC,aAKpBhC,EAAgBC,KAGnBa,MAAM,WACLF,QAAQC,IACN,mEArEAoB,CAAwBhC,GAIxBC,UAAUC,cAAc2B,MAAMzB,KAAK,WACjCO,QAAQC,IACN,+GAMJb,EAAgBC,MCxCxBiC,K","file":"static/js/main.4784c1cd.chunk.js","sourcesContent":["exports.ItemTypes = {\n  TEAM: 'team'\n};\n","exports.SAMPLE_LEAGUE_TABLE = [\n  {\n    name: 'Borussia Mönchengladbach',\n    editing: true,\n    id: 'BMG'\n  },\n  {\n    name: 'Borussia Dortmund',\n    editing: true,\n    id: 'BVB'\n  },\n  {\n    name: 'FC Bayern München',\n    editing: true,\n    id: 'FCB'\n  },\n  {\n    name: 'VFL Wolfsburg',\n    editing: true,\n    id: 'VFL'\n  },\n  {\n    name: 'Bayer Leverkusen',\n    editing: true,\n    id: 'B04'\n  },\n  {\n    name: 'FC Schalke 04',\n    editing: true,\n    id: 'S04'\n  },\n  {\n    name: 'Hertha BSC Berlin',\n    editing: true,\n    id: 'BSC'\n  },\n  {\n    name: '1. FC Köln',\n    editing: true,\n    id: '1FC'\n  },\n  {\n    name: 'FC Ingolstadt',\n    editing: true,\n    id: 'FCI'\n  },\n  {\n    name: 'Darmstadt 98',\n    editing: true,\n    id: 'D98'\n  },\n  {\n    name: 'Hamburger SV',\n    editing: true,\n    id: 'HSV'\n  },\n  {\n    name: 'Eintracht Frankfurt',\n    editing: true,\n    id: 'SGE'\n  },\n  {\n    name: 'Werder Bremen',\n    editing: true,\n    id: 'SVW'\n  },\n  {\n    name: 'Hoffenheim',\n    editing: true,\n    id: 'SAP'\n  },\n  {\n    name: 'FC Augsburg',\n    editing: true,\n    id: 'FCA'\n  },\n  {\n    name: 'Hannover 96',\n    editing: true,\n    id: 'H96'\n  },\n  {\n    name: 'Mainz 05',\n    editing: true,\n    id: 'M05'\n  },\n  {\n    name: 'VFB Stuttgart',\n    editing: true,\n    id: 'VFB'\n  }\n];\n","import { DragSource } from 'react-dnd';\nimport React from 'react';\nimport { ItemTypes } from '../constants/DndItemTypes';\nimport classNames from 'classnames';\nimport PropTypes from 'prop-types';\nimport ContentEditable from 'react-contenteditable';\n\nconst teamSource = {\n  beginDrag(props) {\n    // Return the data describing the dragged item\n    return { sourceId: props.team.id };\n  },\n\n  endDrag(props, monitor) {\n    if (!monitor.didDrop()) {\n      return;\n    }\n\n    // When dropped on a compatible target, do something\n    const sourceTeam = monitor.getItem();\n    const targetTeam = monitor.getDropResult();\n    props.swapPositions(sourceTeam.sourceId, targetTeam.id);\n  }\n};\n\nconst collect = (connect, monitor) => {\n  return {\n    connectDragSource: connect.dragSource(),\n    isDragging: monitor.isDragging()\n  };\n};\n\nconst calculatePositionCssClass = positionNumber => {\n  if (positionNumber === 1) {\n    return 'tabellenfuehrerClass tabelleClass';\n  }\n  if (positionNumber <= 3) {\n    return 'championsLeagueClass tabelleClass';\n  }\n  if (positionNumber <= 6) {\n    return 'europaLeagueClass tabelleClass';\n  }\n  if (positionNumber <= 15) {\n    return 'mittelfeldClass tabelleClass';\n  }\n  if (positionNumber === 16) {\n    return 'relegationClass tabelleClass';\n  } else {\n    return 'abstiegClass tabelleClass';\n  }\n};\n\nconst Team = props => {\n  const { rank, team, updateTeamname } = props;\n  // These two props are injected by React DnD,\n  // as defined by your `collect` function above:\n  const { connectDragSource } = props;\n  const classes = classNames(\n    'col-md-12',\n    'btn',\n    'text-bold',\n    calculatePositionCssClass(rank)\n  );\n\n  const onChange = evt => {\n    updateTeamname(team, evt.target.value);\n  };\n\n  return connectDragSource(\n    <div className={classes} style={{ cursor: 'pointer' }}>\n      <ContentEditable\n        onChange={onChange}\n        className=\"textPointer\"\n        html={team.name}\n        autoFocus={true}\n        maxLength={200}\n        disabled={!team.editing}\n      />\n    </div>\n  );\n};\n\nTeam.propTypes = {\n  connectDragSource: PropTypes.func.isRequired,\n  isDragging: PropTypes.bool.isRequired,\n  rank: PropTypes.number.isRequired,\n\n  // Injected by React DnD:\n  team: PropTypes.object.isRequired,\n  updateTeamname: PropTypes.func.isRequired\n};\n\nexport default DragSource(ItemTypes.TEAM, teamSource, collect)(Team);\n","import React from 'react';\nimport { DropTarget } from 'react-dnd';\nimport Team from './Team';\nimport PropTypes from 'prop-types';\nimport { ItemTypes } from '../constants/DndItemTypes';\n\nconst positionTarget = {\n  drop(props) {\n    return props.team;\n  }\n};\n\nconst collect = (connect, monitor) => {\n  return {\n    connectDropTarget: connect.dropTarget(),\n    isOver: monitor.isOver(),\n    item: monitor.getItem()\n  };\n};\n\nconst Position = props => {\n  const team = props.team;\n  const rank = props.rank;\n  const updateTeamname = props.updateTeamname;\n  const swapPositions = props.swapPositions;\n  const { connectDropTarget } = props;\n  return connectDropTarget(\n    <div>\n      <Team\n        team={team}\n        rank={rank}\n        updateTeamname={updateTeamname}\n        swapPositions={swapPositions}\n      />\n    </div>\n  );\n};\n\nPosition.propTypes = {\n  connectDropTarget: PropTypes.func.isRequired,\n  rank: PropTypes.number.isRequired,\n  swapPositions: PropTypes.func.isRequired,\n  team: PropTypes.object.isRequired,\n  updateTeamname: PropTypes.func.isRequired\n};\nexport default DropTarget(ItemTypes.TEAM, positionTarget, collect)(Position);\n","export default class Positions {\n  static _findTeamRank = (teamId, positions) => {\n    const zeroBasedIndex = positions.findIndex(team => team.id === teamId);\n    return zeroBasedIndex + 1;\n  };\n\n  static _findTeam = (teamId, positions) => {\n    return positions.find(team => team.id === teamId);\n  };\n\n  static recalculateSwappedPositions = (\n    sourceTeamId,\n    targetTeamId,\n    currentPositions\n  ) => {\n    const clonedPositions = currentPositions.slice();\n\n    const sourceRank = Positions._findTeamRank(sourceTeamId, clonedPositions);\n    const targetRank = Positions._findTeamRank(targetTeamId, clonedPositions);\n\n    const sourceTeam = Positions._findTeam(sourceTeamId, clonedPositions);\n    const targetTeam = Positions._findTeam(targetTeamId, clonedPositions);\n\n    clonedPositions[targetRank - 1] = sourceTeam;\n    clonedPositions[sourceRank - 1] = targetTeam;\n    return clonedPositions;\n  };\n\n  static recalculatePositionsWithRenamedTeam = (\n    team,\n    updatedText,\n    currentPositions\n  ) => {\n    const clonedPositions = currentPositions.slice();\n\n    const teamRank = Positions._findTeamRank(team.id, clonedPositions);\n\n    //team.editing = false;\n    team.name = updatedText;\n\n    clonedPositions[teamRank - 1] = team;\n    return clonedPositions;\n  };\n}\n","import React, { useState, useEffect } from 'react';\nimport Position from './Position';\nimport Positions from '../model/Positions';\nimport { DndProvider } from 'react-dnd';\nimport _ from 'lodash';\nimport HTML5Backend from 'react-dnd-html5-backend';\nimport { SAMPLE_LEAGUE_TABLE } from '../constants/SampleData';\nimport { Card, Col } from 'react-bootstrap';\n\nconst LeagueTable = () => {\n  const defaultState = {\n    positions: SAMPLE_LEAGUE_TABLE\n  };\n\n  const getInitialState = () => {\n    if (_.isUndefined(localStorage.state)) {\n      return defaultState;\n    }\n    const localstate = JSON.parse(localStorage.state);\n\n    if (_.isUndefined(localstate)) {\n      return defaultState;\n    }\n    return localstate;\n  };\n\n  const [positions, setPositions] = useState(getInitialState().positions);\n\n  const swapPositions = (sourceTeamId, targetTeamId) => {\n    setPositions(\n      Positions.recalculateSwappedPositions(\n        sourceTeamId,\n        targetTeamId,\n        positions\n      )\n    );\n  };\n\n  const updateTeamname = (team, updatedText) => {\n    setPositions(\n      Positions.recalculatePositionsWithRenamedTeam(\n        team,\n        updatedText,\n        positions\n      )\n    );\n  };\n\n  useEffect(() => {\n    //unused params prevProps and prevState\n    localStorage.state = JSON.stringify({ positions });\n  });\n\n  const positionNodes = positions.map((team, index) => (\n    <Position\n      team={team}\n      rank={index + 1}\n      key={index}\n      swapPositions={swapPositions}\n      updateTeamname={updateTeamname}\n    />\n  ));\n\n  return (\n    <DndProvider backend={HTML5Backend}>\n      <Col md={6}>\n        <Card bg=\"dark\">\n          <Card.Header>\n            <Card.Title>Ligatabelle zum Selberstecken</Card.Title>\n          </Card.Header>\n          <Card.Body>{positionNodes}</Card.Body>\n        </Card>\n      </Col>\n    </DndProvider>\n  );\n};\n\nexport default LeagueTable;\n","import React from 'react';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport './App.css';\nimport { Row, Container } from 'react-bootstrap';\nimport LeagueTable from './LeagueTable';\n\nconst App = () => {\n  return (\n    <div className=\"index\">\n      <Container>\n        <Row>\n          <LeagueTable />\n        </Row>\n      </Container>\n    </div>\n  );\n};\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\nimport registerServiceWorker from './registerServiceWorker';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport './index.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();\n"],"sourceRoot":""}